// use ('example_db');

// db.orders.insertMany([
//   { _id: 1, item: "almonds", price: 12, ordered: 2 },
//   { _id: 2, item: "pecans", price: 20, ordered: 1 },
//   { _id: 3, item: "cookies", price: 10, ordered: 60 }
// ]);

// db.warehouses.insertMany([
//   { _id: 1, stock_item: "almonds", warehouse: "A", instock: 120 },
//   { _id: 2, stock_item: "pecans", warehouse: "A", instock: 80 },
//   { _id: 3, stock_item: "almonds", warehouse: "B", instock: 60 },
//   { _id: 4, stock_item: "cookies", warehouse: "B", instock: 40 },
//   { _id: 5, stock_item: "cookies", warehouse: "A", instock: 80 }
// ]);

// db.orders.aggregate([
//   {
//     $lookup: {
//       from: "warehouses",
//       let: { order_item: "$item", order_qty: "$ordered" },
//       pipeline: [
//         {
//           $match: {
//             $expr: {
//               $and: [
//                 { $eq: [ "$stock_item",  "$$order_item" ] },
//                 { $gte: [ "$instock", "$$order_qty" ] }
//               ]
//             }
//           }
//         },
//         { $project: { stock_item: 0, _id: 0 } }
//       ],
//       as: "stockdata"
//     }
//   }
// ]);

// db.clients.insertMany([
//   { name: "Dave America", State: "Florida" },
//   { name: "Ned Flanders", State: "Alasca" },
//   { name: "Mark Zuck", State: "Texas" },
//   { name: "Edna Krabappel", State: "Montana" },
//   { name: "Arnold Schuz", State: "California" },
//   { name: "Lisa Simpson", State: "Florida" },
//   { name: "Barney Gumble", State: "Texas" },
//   { name: "Homer Simpson", State: "Florida" },
// ]);

// db.transactions.insertMany([
//   { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
//   { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
//   { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
//   { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
//   { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
//   { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
//   { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
//   { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
//   { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
//   { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
// ]);

// Selecione todos os clientes com as suas respectivas transações feitas;
// db.clients.aggregate([
//   { $lookup:
//     {
//       from: "transactions",
//       localField: "name",
//       foreignField: "from",
//       as: "transactions"
//     }
//   }
// ]);

// db.clients.aggregate([
//   {
//     $lookup: {
//       from: "transactions",
//       let: { client_name: "$name" },
//       pipeline: [
//         {
//           $match: {
//             $expr: { $eq: ["$$client_name", "$from"] }
//           }
//         }
//       ],
//       as: "transactions"
//     }
//   }
// ]);

// Selecione os quatro primeiros clientes com as suas respectivas transações recebidas ordenados pelo estado em ordem alfabética;
// db.clients.aggregate([
//   { $sort: { State: 1 } },
//   { $limit: 4 },
//   { $lookup:
//     {
//       from: "transactions",
//       localField: "name",
//       foreignField: "to",
//       as: "transactions"
//     }
//   }
// ]);

// db.clients.aggregate([
//   {
//     $lookup: {
//       from: "transactions",
//       let: { client_name: "$name" },
//       pipeline: [
//         {
//           $match: {
//             $expr: {
//               $and: [
//                 { $eq: ["$$client_name", "$to"] }
//               ]
//             }
//           }
//         }
//       ],
//       as: "transactions"
//     }
//   },
//   {
//     $sort: { "State": 1 },
//   },
//   {
//     $limit: 4,
//   }
// ]);

// Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.
// db.clients.aggregate([
// { $match: { State: "Florida" } },
//   { $lookup:
//     {
//       from: "transactions",
//       localField: "name",
//       foreignField: "to",
//       as: "transactions"
//     }
//   }
// ]);

// db.clients.aggregate([
//   { $match: { State: "Florida" } },
//   {
//     $lookup: {
//       from: "transactions",
//       let: { client_name: "$name" },
//       pipeline: [
//         {
//           $match: {
//             $expr: { $eq: ["$$client_name", "$to" ] }
//           }
//         }
//       ],
//       as: "transactions"
//     }
//   }
// ]);

use ('storage');
// db.products.insertMany([
//   { "name": "Ball", "purchase_price": 7.6, "taxes": 1.9, "sale_price": 12.5, "quantity": 5 },
//   { "name": "Baseball bat", "purchase_price": 18.5, "taxes": 5.3, "sale_price": 39.9, "quantity": 12 },
//   { "name": "Sneakers", "purchase_price": 10.4, "taxes": 1.50, "sale_price": 14.9, "quantity": 3 },
//   { "name": "Gloves", "purchase_price": 2.85, "taxes": 0.90, "sale_price": 5.70, "quantity": 34 },
//   { "name": "Jacket", "purchase_price": 28.9, "taxes": 10.80, "sale_price": 59.9, "quantity": 20 },
//   { "name": "Mousepad", "purchase_price": 16.6, "taxes": 3.40, "sale_price": 29.9, "quantity": 8 },
//   { "name": "Monitor", "purchase_price": 119.9, "taxes": 39.20, "sale_price": 240.6, "quantity": 11 },
// ]);

// Calcule qual o custo total de cada produto, considerando o preço de compra e os impostos.
// db.products.aggregate([
//   { $project: { _id: 0, name: 1, total: { $add: ["$purchase_price", "$taxes"] } } }
// ]);

// Calcule qual o lucro total de cada produto, considerando o preço de compra, os impostos e seu valor de venda.
// db.products.aggregate([
//   { $project: {
//     _id: 0,
//     name: 1, 
//     profit: { $subtract: ["$sale_price", { $add: ["$purchase_price", "$taxes"] }] }
//   } }
// ]);

// Retorne o menor número inteiro relativo ao preço de venda de cada produto;
// db.products.aggregate([
//   {
//     $project: {
//       _id: 0,
//       name: 1,
//       floored_price: { $floor: "$sale_price" }
//     }
//   }
// ]);


// Retorne o maior número inteiro relativo ao lucro total sobre cada produto. Nota: Desconsiderar taxas (taxes)
// db.products.aggregate([
//   { $project: {
//     _id: 0,
//     name: 1,
//     ceiling_price: {
//         $ceil: {
//             $subtract: ["$sale_price", "$purchase_price"]
//         }
//     }
//   } }
// ]);


// Calcule o valor absoluto do lucro total de cada produto.
// db.products.aggregate([
//   {
//     $project: {
//       _id: 0,
//       name: 1,
//       abs: { $abs: { $subtract: [{ $add: ["$taxes", "$purchase_price"] }, "$sale_price"] } }
//     }
//   }
// ]);


// Calcule qual o valor total em estoque de cada produto, considerando o preço de venda e a quantidade;
// db.products.aggregate([
//   {
//     $project: {
//       _id: 0,
//       name: 1,
//       total_value_in_stock: { $multiply: ["$purchase_price", "$quantity"] }
//     }
//   }
// ]);


// Calcule qual será o lucro total de cada produto caso todo o estoque seja vendido.
// db.products.aggregate([
//   {
//     $project: {
//       _id: 0,
//       name: 1,
//       total_profit: { 
//         $multiply: [{ $subtract:["$sale_price", { $add: ["$taxes", "$purchase_price"] }] }, "$quantity"] 
//       }
//     }
//   }
// ]);


// Calcule qual será o preço de venda de cada produto caso haja uma promoção de 50% de desconto.
// db.products.aggregate([
//   {
//     $project: {
//       _id: 0,
//       name: 1,
//       price_with_discount: { 
//         $divide: ["$sale_price", 2] 
//       }
//     }
//   }
// ]);

// db.products.aggregate([
//   {
//     $project: {
//       _id: 0,
//       name: 1,
//       new_price: {
//         $subtract: [
//           "$sale_price", {
//             $multiply: [{ $divide: [50, 100] }, "$sale_price"
//             ]
//           }
//         ]
//       }
//     }
//   }
// ]);

// Calcule o valor total do estoque, considerando que cada produto valha o mesmo que seu preço de venda. Lembre-se da quantidade.
db.products.aggregate([
  {
    $addFields: {
      total_value_stock: { $multiply: ["$sale_price", "$quantity"] }
    }
  }
]);

